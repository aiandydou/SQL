#178.Rank Scores

Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. 
Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, 
there should be no "holes" between ranks.

+----+-------+
| Id | Score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+
For example, given the above Scores table, your query should generate the following report (order by highest score):

+-------+------+
| Score | Rank |
+-------+------+
| 4.00  | 1    |
| 4.00  | 1    |
| 3.85  | 2    |
| 3.65  | 3    |
| 3.65  | 3    |
| 3.50  | 4    |
+-------+------+

Solution:

解法一:
适用于SQL Server 的dense_rank function.
dense_rank() over (partition by...order by...)

解法二：
适用于没有dense_rank 的MYSQL等。
这个题目还需要花点时间继续理解。
第一列不难理解，把Score按照降序排列一下。
第二列要得到排名，即统计每个元素，大于等于它本身的distinct元素有多少个。例如：4.0，大于等于4.0的就是1;3.85，大于等于3.85的有4.0和3.85，排名为2；
3.65，大于等于3.65的又4.0，3.85，3.65，排名为3。

SELECT o.Score,(
    SELECT COUNT(n.Score) FROM Scores n 
    WHERE n.Score>=o.Score
) as Rank
FROM Scores o
ORDER BY o.score DESC

建立两个表，一个Scores o,一个Scores n，用n 这个表做filter用，new表中比old表中Score大的有几个，count一下。就得到第二列。
